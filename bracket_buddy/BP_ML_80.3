{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras import models\n",
    "from keras import layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ml_data_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>h_AdjTempo</th>\n",
       "      <th>h_AdjOE</th>\n",
       "      <th>h_AdjDE</th>\n",
       "      <th>h_eFG_Pct_O</th>\n",
       "      <th>h_eFG_Pct_D</th>\n",
       "      <th>h_TO_Pct_O</th>\n",
       "      <th>h_TO_Pct_D</th>\n",
       "      <th>h_OR_Pct_O</th>\n",
       "      <th>h_OR_Pct_D</th>\n",
       "      <th>h_FT_Rate_O</th>\n",
       "      <th>...</th>\n",
       "      <th>a_OppBlockPct</th>\n",
       "      <th>a_F3GRate</th>\n",
       "      <th>a_OppF3GRate</th>\n",
       "      <th>a_ARate</th>\n",
       "      <th>a_OppARate</th>\n",
       "      <th>a_StlRate</th>\n",
       "      <th>a_OppStlRate</th>\n",
       "      <th>hca</th>\n",
       "      <th>home_points</th>\n",
       "      <th>away_points</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56.9537</td>\n",
       "      <td>96.7489</td>\n",
       "      <td>104.867</td>\n",
       "      <td>50.0378</td>\n",
       "      <td>53.1845</td>\n",
       "      <td>22.4911</td>\n",
       "      <td>19.9856</td>\n",
       "      <td>23.3696</td>\n",
       "      <td>31.5758</td>\n",
       "      <td>34.4175</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6466</td>\n",
       "      <td>37.6415</td>\n",
       "      <td>35.5422</td>\n",
       "      <td>48.3266</td>\n",
       "      <td>49.7920</td>\n",
       "      <td>0.1061</td>\n",
       "      <td>0.0858</td>\n",
       "      <td>4.1</td>\n",
       "      <td>46</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56.9537</td>\n",
       "      <td>96.7489</td>\n",
       "      <td>104.867</td>\n",
       "      <td>50.0378</td>\n",
       "      <td>53.1845</td>\n",
       "      <td>22.4911</td>\n",
       "      <td>19.9856</td>\n",
       "      <td>23.3696</td>\n",
       "      <td>31.5758</td>\n",
       "      <td>34.4175</td>\n",
       "      <td>...</td>\n",
       "      <td>7.4976</td>\n",
       "      <td>30.8418</td>\n",
       "      <td>31.6192</td>\n",
       "      <td>42.3701</td>\n",
       "      <td>54.7022</td>\n",
       "      <td>0.1148</td>\n",
       "      <td>0.1096</td>\n",
       "      <td>4.1</td>\n",
       "      <td>68</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64.0592</td>\n",
       "      <td>110.2710</td>\n",
       "      <td>101.057</td>\n",
       "      <td>51.2293</td>\n",
       "      <td>49.3358</td>\n",
       "      <td>17.3706</td>\n",
       "      <td>19.7973</td>\n",
       "      <td>33.1795</td>\n",
       "      <td>27.7778</td>\n",
       "      <td>36.3271</td>\n",
       "      <td>...</td>\n",
       "      <td>10.6650</td>\n",
       "      <td>39.7126</td>\n",
       "      <td>44.2167</td>\n",
       "      <td>61.3793</td>\n",
       "      <td>60.6109</td>\n",
       "      <td>0.0816</td>\n",
       "      <td>0.1002</td>\n",
       "      <td>3.9</td>\n",
       "      <td>58</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>56.9537</td>\n",
       "      <td>96.7489</td>\n",
       "      <td>104.867</td>\n",
       "      <td>50.0378</td>\n",
       "      <td>53.1845</td>\n",
       "      <td>22.4911</td>\n",
       "      <td>19.9856</td>\n",
       "      <td>23.3696</td>\n",
       "      <td>31.5758</td>\n",
       "      <td>34.4175</td>\n",
       "      <td>...</td>\n",
       "      <td>10.5038</td>\n",
       "      <td>36.0082</td>\n",
       "      <td>39.1696</td>\n",
       "      <td>57.4040</td>\n",
       "      <td>57.1675</td>\n",
       "      <td>0.1091</td>\n",
       "      <td>0.0919</td>\n",
       "      <td>4.1</td>\n",
       "      <td>75</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.9537</td>\n",
       "      <td>96.7489</td>\n",
       "      <td>104.867</td>\n",
       "      <td>50.0378</td>\n",
       "      <td>53.1845</td>\n",
       "      <td>22.4911</td>\n",
       "      <td>19.9856</td>\n",
       "      <td>23.3696</td>\n",
       "      <td>31.5758</td>\n",
       "      <td>34.4175</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0361</td>\n",
       "      <td>29.9877</td>\n",
       "      <td>34.7852</td>\n",
       "      <td>52.4793</td>\n",
       "      <td>53.1126</td>\n",
       "      <td>0.0878</td>\n",
       "      <td>0.1050</td>\n",
       "      <td>4.1</td>\n",
       "      <td>68</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 113 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   h_AdjTempo   h_AdjOE  h_AdjDE  h_eFG_Pct_O  h_eFG_Pct_D  h_TO_Pct_O  \\\n",
       "0     56.9537   96.7489  104.867      50.0378      53.1845     22.4911   \n",
       "1     56.9537   96.7489  104.867      50.0378      53.1845     22.4911   \n",
       "2     64.0592  110.2710  101.057      51.2293      49.3358     17.3706   \n",
       "3     56.9537   96.7489  104.867      50.0378      53.1845     22.4911   \n",
       "4     56.9537   96.7489  104.867      50.0378      53.1845     22.4911   \n",
       "\n",
       "   h_TO_Pct_D  h_OR_Pct_O  h_OR_Pct_D  h_FT_Rate_O     ...       \\\n",
       "0     19.9856     23.3696     31.5758      34.4175     ...        \n",
       "1     19.9856     23.3696     31.5758      34.4175     ...        \n",
       "2     19.7973     33.1795     27.7778      36.3271     ...        \n",
       "3     19.9856     23.3696     31.5758      34.4175     ...        \n",
       "4     19.9856     23.3696     31.5758      34.4175     ...        \n",
       "\n",
       "   a_OppBlockPct  a_F3GRate  a_OppF3GRate  a_ARate  a_OppARate  a_StlRate  \\\n",
       "0         9.6466    37.6415       35.5422  48.3266     49.7920     0.1061   \n",
       "1         7.4976    30.8418       31.6192  42.3701     54.7022     0.1148   \n",
       "2        10.6650    39.7126       44.2167  61.3793     60.6109     0.0816   \n",
       "3        10.5038    36.0082       39.1696  57.4040     57.1675     0.1091   \n",
       "4         7.0361    29.9877       34.7852  52.4793     53.1126     0.0878   \n",
       "\n",
       "   a_OppStlRate  hca  home_points  away_points  \n",
       "0        0.0858  4.1           46           70  \n",
       "1        0.1096  4.1           68           58  \n",
       "2        0.1002  3.9           58           48  \n",
       "3        0.0919  4.1           75           41  \n",
       "4        0.1050  4.1           68           75  \n",
       "\n",
       "[5 rows x 113 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_path = os.path.join('data', 'ml_data', 'model_data.csv')\n",
    "data_df = pd.read_csv(data_path)\n",
    "data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>h_AdjTempo</th>\n",
       "      <th>h_AdjOE</th>\n",
       "      <th>h_AdjDE</th>\n",
       "      <th>h_eFG_Pct_O</th>\n",
       "      <th>h_eFG_Pct_D</th>\n",
       "      <th>h_TO_Pct_O</th>\n",
       "      <th>h_TO_Pct_D</th>\n",
       "      <th>h_OR_Pct_O</th>\n",
       "      <th>h_OR_Pct_D</th>\n",
       "      <th>h_FT_Rate_O</th>\n",
       "      <th>...</th>\n",
       "      <th>a_OppFG3Pct</th>\n",
       "      <th>a_OppFTPct</th>\n",
       "      <th>a_OppBlockPct</th>\n",
       "      <th>a_F3GRate</th>\n",
       "      <th>a_OppF3GRate</th>\n",
       "      <th>a_ARate</th>\n",
       "      <th>a_OppARate</th>\n",
       "      <th>a_StlRate</th>\n",
       "      <th>a_OppStlRate</th>\n",
       "      <th>hca</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.766764</td>\n",
       "      <td>-1.10728</td>\n",
       "      <td>0.346726</td>\n",
       "      <td>0.064405</td>\n",
       "      <td>1.306807</td>\n",
       "      <td>1.583705</td>\n",
       "      <td>0.364575</td>\n",
       "      <td>-1.771111</td>\n",
       "      <td>0.319206</td>\n",
       "      <td>-0.404502</td>\n",
       "      <td>...</td>\n",
       "      <td>0.418625</td>\n",
       "      <td>0.488891</td>\n",
       "      <td>0.135216</td>\n",
       "      <td>0.510113</td>\n",
       "      <td>0.178314</td>\n",
       "      <td>-0.789246</td>\n",
       "      <td>-0.628863</td>\n",
       "      <td>0.877644</td>\n",
       "      <td>-0.509960</td>\n",
       "      <td>1.149670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-2.766764</td>\n",
       "      <td>-1.10728</td>\n",
       "      <td>0.346726</td>\n",
       "      <td>0.064405</td>\n",
       "      <td>1.306807</td>\n",
       "      <td>1.583705</td>\n",
       "      <td>0.364575</td>\n",
       "      <td>-1.771111</td>\n",
       "      <td>0.319206</td>\n",
       "      <td>-0.404502</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.662650</td>\n",
       "      <td>-1.385344</td>\n",
       "      <td>-1.165224</td>\n",
       "      <td>-0.687194</td>\n",
       "      <td>-0.717707</td>\n",
       "      <td>-1.906266</td>\n",
       "      <td>0.359056</td>\n",
       "      <td>1.404013</td>\n",
       "      <td>1.314969</td>\n",
       "      <td>1.149670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.588638</td>\n",
       "      <td>0.71089</td>\n",
       "      <td>-0.226869</td>\n",
       "      <td>0.449733</td>\n",
       "      <td>-0.012649</td>\n",
       "      <td>-0.750542</td>\n",
       "      <td>0.283287</td>\n",
       "      <td>0.548522</td>\n",
       "      <td>-0.871364</td>\n",
       "      <td>-0.037438</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010769</td>\n",
       "      <td>-0.616566</td>\n",
       "      <td>0.751488</td>\n",
       "      <td>0.874797</td>\n",
       "      <td>2.159589</td>\n",
       "      <td>1.658521</td>\n",
       "      <td>1.547871</td>\n",
       "      <td>-0.604663</td>\n",
       "      <td>0.594199</td>\n",
       "      <td>0.975749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.766764</td>\n",
       "      <td>-1.10728</td>\n",
       "      <td>0.346726</td>\n",
       "      <td>0.064405</td>\n",
       "      <td>1.306807</td>\n",
       "      <td>1.583705</td>\n",
       "      <td>0.364575</td>\n",
       "      <td>-1.771111</td>\n",
       "      <td>0.319206</td>\n",
       "      <td>-0.404502</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.796955</td>\n",
       "      <td>-2.671501</td>\n",
       "      <td>0.653940</td>\n",
       "      <td>0.222517</td>\n",
       "      <td>1.006820</td>\n",
       "      <td>0.913034</td>\n",
       "      <td>0.855068</td>\n",
       "      <td>1.059150</td>\n",
       "      <td>-0.042226</td>\n",
       "      <td>1.149670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-2.766764</td>\n",
       "      <td>-1.10728</td>\n",
       "      <td>0.346726</td>\n",
       "      <td>0.064405</td>\n",
       "      <td>1.306807</td>\n",
       "      <td>1.583705</td>\n",
       "      <td>0.364575</td>\n",
       "      <td>-1.771111</td>\n",
       "      <td>0.319206</td>\n",
       "      <td>-0.404502</td>\n",
       "      <td>...</td>\n",
       "      <td>0.312112</td>\n",
       "      <td>0.317558</td>\n",
       "      <td>-1.444495</td>\n",
       "      <td>-0.837586</td>\n",
       "      <td>0.005414</td>\n",
       "      <td>-0.010492</td>\n",
       "      <td>0.039233</td>\n",
       "      <td>-0.229548</td>\n",
       "      <td>0.962252</td>\n",
       "      <td>1.149670</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 111 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   h_AdjTempo  h_AdjOE   h_AdjDE  h_eFG_Pct_O  h_eFG_Pct_D  h_TO_Pct_O  \\\n",
       "0   -2.766764 -1.10728  0.346726     0.064405     1.306807    1.583705   \n",
       "1   -2.766764 -1.10728  0.346726     0.064405     1.306807    1.583705   \n",
       "2   -0.588638  0.71089 -0.226869     0.449733    -0.012649   -0.750542   \n",
       "3   -2.766764 -1.10728  0.346726     0.064405     1.306807    1.583705   \n",
       "4   -2.766764 -1.10728  0.346726     0.064405     1.306807    1.583705   \n",
       "\n",
       "   h_TO_Pct_D  h_OR_Pct_O  h_OR_Pct_D  h_FT_Rate_O    ...     a_OppFG3Pct  \\\n",
       "0    0.364575   -1.771111    0.319206    -0.404502    ...        0.418625   \n",
       "1    0.364575   -1.771111    0.319206    -0.404502    ...       -0.662650   \n",
       "2    0.283287    0.548522   -0.871364    -0.037438    ...        0.010769   \n",
       "3    0.364575   -1.771111    0.319206    -0.404502    ...       -1.796955   \n",
       "4    0.364575   -1.771111    0.319206    -0.404502    ...        0.312112   \n",
       "\n",
       "   a_OppFTPct  a_OppBlockPct  a_F3GRate  a_OppF3GRate   a_ARate  a_OppARate  \\\n",
       "0    0.488891       0.135216   0.510113      0.178314 -0.789246   -0.628863   \n",
       "1   -1.385344      -1.165224  -0.687194     -0.717707 -1.906266    0.359056   \n",
       "2   -0.616566       0.751488   0.874797      2.159589  1.658521    1.547871   \n",
       "3   -2.671501       0.653940   0.222517      1.006820  0.913034    0.855068   \n",
       "4    0.317558      -1.444495  -0.837586      0.005414 -0.010492    0.039233   \n",
       "\n",
       "   a_StlRate  a_OppStlRate       hca  \n",
       "0   0.877644     -0.509960  1.149670  \n",
       "1   1.404013      1.314969  1.149670  \n",
       "2  -0.604663      0.594199  0.975749  \n",
       "3   1.059150     -0.042226  1.149670  \n",
       "4  -0.229548      0.962252  1.149670  \n",
       "\n",
       "[5 rows x 111 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = data_df[['home_points', 'away_points']]\n",
    "X = data_df.drop(['home_points', 'away_points'], axis=1)\n",
    "X -= ml_data_stats.mean\n",
    "X = X / ml_data_stats.std\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(51759, 111)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model():\n",
    "    model = models.Sequential()\n",
    "    model.add(layers.Dense(64, activation='relu',\n",
    "              input_shape=(X.shape[1],)))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(64, activation='relu'))\n",
    "    model.add(layers.Dense(32, activation='relu'))\n",
    "\n",
    "    model.add(layers.Dense(2))\n",
    "    model.compile(optimizer='Nadam', loss='mse', metrics=['mae'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = build_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test['home_win'] = y_test['home_points'] > y_test['away_points']\n",
    "y_test.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test['home_win'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_val_df['home_win'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test = y_test.reset_index()\n",
    "acc = [y_test.loc[x, 'home_win'] == y_val_df.loc[x, 'home_win'] for x in range(len(y_test))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
